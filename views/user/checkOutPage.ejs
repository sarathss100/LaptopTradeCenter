<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Head Boiler Plate -->
    <%- include('components/headboilerplate') %>
  </head>
  <body class="flex flex-col min-h-screen">
    <!-- Navbar Section -->
    <%- include('components/navbar') %>

    <!-- Toaser Error Message -->
    <div class="hidden font-[sans-serif] space-y-6 mx-auto w-max mt-4 absolute top-36 right-10">
      <div class="bg-white shadow-[0_3px_10px_-3px_rgba(6,81,237,0.3)] text-gray-800 flex items-center w-max max-w-sm p-4 rounded-md"
        role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-[18px] shrink-0 fill-red-500 inline mr-3" viewBox="0 0 32 32">
          <path
            d="M16 1a15 15 0 1 0 15 15A15 15 0 0 0 16 1zm6.36 20L21 22.36l-5-4.95-4.95 4.95L9.64 21l4.95-5-4.95-4.95 1.41-1.41L16 14.59l5-4.95 1.41 1.41-5 4.95z"
            data-original="#ea2d3f" />
        </svg>
        <span class="text-sm font-semibold tracking-wide">Something went wrong</span>
      </div>
    </div>

    <div
      id="order-success-modal"
      class="hidden fixed inset-0 p-4 flex flex-wrap justify-center items-center w-full h-full z-[1000] before:fixed before:inset-0 before:w-full before:h-full before:bg-[rgba(0,0,0,0.5)] overflow-auto font-[sans-serif]"
    >
      <div class="w-full max-w-lg bg-white shadow-lg rounded-lg p-6 relative">
        <div class="my-8 text-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-14 shrink-0 fill-green-500 inline"
            viewBox="0 0 512 512"
          >
            <path
              d="M383.841 171.838c-7.881-8.31-21.02-8.676-29.343-.775L221.987 296.732l-63.204-64.893c-8.005-8.213-21.13-8.393-29.35-.387-8.213 7.998-8.386 21.137-.388 29.35l77.492 79.561a20.687 20.687 0 0 0 14.869 6.275 20.744 20.744 0 0 0 14.288-5.694l147.373-139.762c8.316-7.888 8.668-21.027.774-29.344z"
              data-original="#000000"
            />
            <path
              d="M256 0C114.84 0 0 114.84 0 256s114.84 256 256 256 256-114.84 256-256S397.16 0 256 0zm0 470.487c-118.265 0-214.487-96.214-214.487-214.487 0-118.265 96.221-214.487 214.487-214.487 118.272 0 214.487 96.221 214.487 214.487 0 118.272-96.215 214.487-214.487 214.487z"
              data-original="#000000"
            />
          </svg>
          <h4 class="text-xl text-gray-800 font-semibold mt-4">
            Order Successfully accepted!
          </h4>
        </div>

        <!-- Order Summary -->
         
            <div class="flex justify-center text-center border-b border-gray-300 pb-4">
              <div class="flex-1">
                <h3 class="text-gray-800 text-xl font-bold">Order Summary</h3>
              </div>
            </div>

            <div class="my-8" id="order-summary"></div>

            <div class="flex max-sm:flex-col items-center gap-4 mt-8">
              <button
                id="downloadPDF"
                type="button"
                class="text-sm px-4 py-2.5 w-full tracking-wide bg-blue-600 hover:bg-blue-700 text-white rounded-lg"
              >
                Download Invoice
              </button>
            </div>
            <div class="flex max-sm:flex-col items-center gap-4 mt-8"></div>
              <button
                id="close-modal-button"
                type="button"
                class="px-5 py-2.5 w-full rounded-lg text-white text-sm border-none outline-none bg-submit-button hover:bg-gray-700"
              >
                Go to Order History
              </button>
            </div>       
      </div>
    </div>

    <!-- Main Content Section -->
    <main class="flex flex-row mt-3">
      <div class="w-full ml-3">
        <section class="bg-white py-8 antialiase md:py-8">
          <!-- <form id="checkoutForm" class="mx-auto max-w-screen-xl px-4 2xl:px-0"> -->
          <div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
            <div class="flex justify-between border-b pb-8">
              <h1 class="font-semibold text-2xl">Checkout</h1>
            </div>
            <div
              class="mt-6 sm:mt-8 lg:flex lg:items-start lg:gap-12 xl:gap-16"
            >
              <div class="min-w-0 flex-1 space-y-8">
                <div class="space-y-4">
                  <h2 class="text-xl font-semibold text-black">
                    Default Delivery Address
                  </h2>

                  <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    <div>
                      <label
                        for="your_name"
                        class="mb-2 block text-sm font-medium text-black"
                      >
                        Your name
                      </label>
                      <input
                        type="text"
                        id="your_name"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.first_name%> <%=user.second_name%>"
                        readonly
                        required
                      />
                    </div>

                    <div>
                      <label
                        for="your_email"
                        class="mb-2 block text-sm font-medium text-black"
                      >
                        Your email*
                      </label>
                      <input
                        type="email"
                        id="your_email"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.email%>"
                        readonly
                        required
                      />
                    </div>

                    <div>
                      <label
                        for="phone-input-3"
                        class="mb-2 block text-sm font-medium text-black"
                      >
                        Phone Number*
                      </label>
                      <div class="flex items-center">
                        <button
                          id="dropdown-phone-button-3"
                          data-dropdown-toggle="dropdown-phone-3"
                          class="z-10 inline-flex shrink-0 items-center rounded-s-lg border border-gray-300 bg-gray-100 px-4 py-2.5 text-center text-sm font-medium text-black hover:bg-gray-200"
                          type="button"
                        >
                          +91
                        </button>

                        <div class="relative w-full">
                          <input
                            type="text"
                            id="phone-input"
                            class="z-20 block w-full rounded-e-lg border border-s-0 border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                            pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}"
                            value="<%=user.phone_number%>"
                            readonly
                            required
                          />
                        </div>
                      </div>
                    </div>

                    <div>
                      <div class="mb-2 flex items-center gap-2">
                        <label
                          for="address_line"
                          class="block text-sm font-medium text-black"
                        >
                          Address*
                        </label>
                      </div>
                      <% if (user.address?.[0]?.address_line_1 === undefined) { %>
                      <input
                        id="address_line"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value=""
                        readonly
                      />
                    <% } else { %>
                     <input
                        id="address_line"
                       type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%= user.address[0].address_line_1 %> <%= user.address[0].address_line_2 %>"
                        readonly
                      />
                    <% } %>
                    </div>

                    <div>
                      <div class="mb-2 flex items-center gap-2">
                        <label
                          for="street"
                          class="block text-sm font-medium text-black"
                        >
                          Street*
                        </label>
                      </div>
                      <% if (user.address?.[0]?.street === undefined) { %>
                      <input
                        id="street"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value=""
                        readonly
                      />
                      <% } else { %>
                        <input
                        id="street"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.address[0].street%>"
                        readonly
                      />
                      <% } %>
                    </div>

                    <div>
                      <div class="mb-2 flex items-center gap-2">
                        <label
                          for="city"
                          class="block text-sm font-medium text-black"
                        >
                          City*
                        </label>
                      </div>
                      <% if (user.address?.[0]?.city === undefined) { %>
                      <input
                        id="city"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value=""
                        readonly
                      />
                      <% } else { %>
                        <input
                        id="city"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.address[0].city%>"
                        readonly
                      />
                      <% } %>
                    </div>

                    <div>
                      <div class="mb-2 flex items-center gap-2">
                        <label
                          for="state"
                          class="block text-sm font-medium text-black"
                        >
                          State*
                        </label>
                      </div>
                      <% if (user.address?.[0]?.state === undefined) { %>
                      <input
                        id="state"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value=""
                        readonly
                      />
                      <% } else { %>
                        <input
                        id="state"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.address[0].state%>"
                        readonly
                      />
                      <% } %>
                    </div>

                    <div>
                      <div class="mb-2 flex items-center gap-2">
                        <label
                          for="country"
                          class="block text-sm font-medium text-black"
                        >
                          Country*
                        </label>
                      </div>
                      <% if (user.address?.[0]?.country === undefined) { %>
                      <input
                        id="country"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value=""
                        readonly
                      />
                      <% } else { %>
                        <input
                        id="country"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.address[0].country%>"
                        readonly
                      />
                      <% } %>
                    </div>

                    <div>
                      <div class="mb-2 flex items-center gap-2">
                        <label
                          for="zip_code"
                          class="block text-sm font-medium text-black"
                        >
                          Zip-Code*
                        </label>
                      </div>
                      <% if (user.address?.[0]?.zip_code === undefined) { %>
                      <input
                        id="zip_code"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value=""
                        readonly
                      />
                      <% } else {  %>
                        <input
                        id="zip_code"
                        type="text"
                        class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black"
                        value="<%=user.address[0].zip_code%>"
                        readonly
                      />
                      <% } %>
                    </div>

                    <div class="sm:col-span-2">
                      <button
                        type="button"
                        onclick="window.location.href='/addAddressPage';"
                        class="flex w-full items-center justify-center gap-2 rounded-lg border border-gray-200 bg-white px-5 py-2.5 text-sm font-medium text-black"
                      >
                        <svg
                          class="h-5 w-5"
                          aria-hidden="true"
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke="currentColor"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M5 12h14m-7 7V5"
                          />
                        </svg>
                        Add new address
                      </button>
                    </div>
                  </div>
                </div>

                <div class="space-y-4">
                  <h3 class="text-xl font-semibold text-black">Address Options</h3>

                  <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
                    <% for( let i = 0; i < user.address.length; i++ ) { %>
                    <div
                      class="rounded-lg border border-gray-200 bg-gray-50 p-4 ps-4"
                    >
                      <div class="flex items-start">
                        <div class="flex h-5 items-center">
                          <input id="address-<%=i%>"
                          aria-describedby="address-text-<%=i%>" type="radio"
                          name="address-selection" value='<%=JSON.stringify(user.address[i]) %>' 
                          class="h-4 w-4
                          border-gray-300 bg-white text-black" <% if (i === 0) { %>checked<% } %> 
                          />
                        </div>

                        <div class="ms-4 text-sm">
                          <label
                            for="address-<%=i%>"
                            class="font-medium leading-none text-black"
                          >
                            Address <%=i+1%>
                          </label>
                          <p
                            id="address-text-<%=i%>"
                            class="mt-1 text-xs font-normal text-black"
                          >
                            <%=user.address[i].address_line_1%>
                            <%=user.address[i].address_line_2%> <br />
                            <%=user.address[i].street%>,
                            <%=user.address[i].city%>, <br />
                            <%=user.address[i].state%>
                            <%=user.address[i].country%>
                            <%=user.address[i].zip_code%>
                          </p>
                        </div>
                      </div>
                    </div>
                    <% } %>
                  </div>
                </div>

                <div class="mt-6 w-full sm:mt-8 lg:mt-0 lg:max-w-xs xl:max-w-md">
                  <h3 class="text-xl font-semibold text-black">Coupons Options</h3>
                </div>

                <div
              class="space-y-4 rounded-lg mb-3 w-1/3 border border-gray-200 bg-white p-4 shadow-sm sm:p-6"
            >
              <form id="couponForm" class="space-y-4">
                <div>
                  <label
                    for="voucher"
                    class="mb-2 block text-sm font-medium text-black"
                  >
                    Available Coupons
                  </label>
                  <select
                    id="couponDropdown"
                    onchange="updateSelectedCoupon(this.value)"
                    class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-black focus:border-primary-500 focus:ring-primary-500"
                  >
                    <option value="0">None</option>
                    <% for ( let coupon of couponsAvailable ) { %> 
                      <% if (coupon !== undefined) { %>
                    <option value="<%=coupon.coupon_code%>">
                      <%=coupon.coupon_code%>
                    </option>
                    <% } %> <% } %>
                  </select>
                </div>
                <button
                  type="submit"
                  class="flex w-full items-center justify-center rounded-lg bg-submit-button px-5 py-2.5 text-sm font-medium text-white hover:bg-primary-800 focus:outline-none focus:ring-4 focus:ring-primary-300"
                >
                  Apply Code
                </button>
              </form>
            </div> 

                <div class="mt-6 w-full sm:mt-8 lg:mt-0 lg:max-w-xs xl:max-w-md">
                  <h3 class="text-xl font-semibold text-black">Order Summary</h3>
                </div>

                <div>
                  <div class="flow-root">
                    <div class="-my-3 divide-y divide-gray-200 dark:divide-gray-800">
                      <dl class="flex items-center justify-between gap-4 py-3">
                        <dt class="text-md font-normal text-black">Subtotal</dt>
                        <dd id="totalAmount" class="text-base font-medium text-black">
                          ₹ <%=new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,}).format(billSummary.subtotal.toFixed())%>
                        </dd>
                      </dl>

                      <dl class="flex items-center justify-between gap-4 py-3">
                        <dt class="text-md font-normal text-black">
                          Discounts
                        </dt>
                        <dd id="discountAmount" class="text-base font-medium text-green-500">
                          ₹ <%=new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,}).format(billSummary.discount.toFixed())%>
                        </dd>
                      </dl>

                      <dl class="flex items-center justify-between gap-4 py-3">
                        <dt class="text-md font-normal text-black">
                          Coupons
                        </dt>
                        <dd id="couponAmount" class="text-base font-medium text-green-500">
                          ₹ <%=new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,}).format(billSummary.couponDeduction.toFixed())%>
                        </dd>
                      </dl>

                      <dl class="flex items-center justify-between gap-4 py-3">
                        <dt class="text-md font-normal text-black">
                          Delievery Charge
                        </dt>
                        <dd class="text-base font-medium text-black">₹0</dd>
                      </dl>

                      <dl class="flex items-center justify-between gap-4 py-3">
                        <dt class="text-sm font-normal text-black">GST</dt>
                        <dd id="gstAmount" class="text-base font-medium text-black">
                          ₹ <%=new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,}).format(billSummary.gst.toFixed())%>
                        </dd>
                      </dl>

                      <dl class="flex items-center justify-between gap-4 py-3">
                        <dt class="text-base font-bold text-black">
                          Grand Total
                        </dt>
                        <dd
                          id="grand-total"
                          class="text-base font-bold text-black"
                        >
                          ₹ <%=new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,}).format(billSummary.grandTotal.toFixed())%>
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>

                <div class="mt-6 w-full sm:mt-8 lg:mt-0 lg:max-w-xs xl:max-w-md">
                    <h3 class="text-xl font-semibold text-black">Payment Options</h3>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-2 mt-6">
                  
                  <div
                    class="rounded-lg border border-gray-200 bg-gray-50 p-4"
                  >
                    <div class="flex items-start">
                      <div class="flex h-5 items-center">
                        <input
                          id="upi"
                          aria-describedby="upi-text"
                          type="radio"
                          name="payment-method"
                          value=""
                          class="h-4 w-4 border-gray-300 bg-white text-black"
                        />
                      </div>
                      <div id="paypal-button-container" class="ml-2 w-3/5"></div>
                    </div>
                  </div>

                    <div
                      class="rounded-lg border border-gray-200 bg-gray-50 p-4"
                    >
                      <div class="flex items-start">
                        <div class="flex h-5 items-center">
                          <input
                            id="cod"
                            aria-describedby="cod-text"
                            type="radio"
                            name="payment-method"
                            value=""
                            class="h-4 w-4 border-gray-300 bg-white text-primary-600"
                            checked
                          />
                        </div>

                        <div class="ms-4 text-sm">
                          <label
                            for="cod"
                            class="font-medium leading-none text-black"
                          >
                            Cash On Delievery
                          </label>
                          <p
                            id="cod-text"
                            class="mt-1 text-xs font-normal text-black"
                          >
                            Please pay with cash
                          </p>
                          <div class="mt-3"></div>
                            <button
                              type="button"
                              class="flex items-center justify-center rounded-lg bg-submit-button px-5 py-2.5 text-sm font-medium text-white hover:bg-green-800"
                              id="place-order"
                            >
                              Place Order
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div
                      class="rounded-lg w-1/3 border mt-2 border-gray-200 bg-gray-50 p-4 ps-4"
                    >
                      <div class="flex items-start">
                        <div class="flex items-center">
                          <input
                            id="wallet"
                            aria-describedby="pww-text"
                            type="radio"
                            name="payment-method"
                            value=""
                            class="h-4 w-4 border-gray-300 bg-white text-primary-600"
                          />
                        </div>

                        <div class="ms-4 text-sm">
                          <label
                            for="pay-with-wallet"
                            class="font-medium leading-none text-black"
                          >
                            Pay with wallet
                          </label>
                          <p
                            id="wallet-text"
                            class="mt-1 text-xs font-normal text-black"
                          >
                            Wallet balance 
                          </p>
                          <p class="text-xs py-1">₹ <%=new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,}).format(walletBalance)%></p>
                          <div class="mt-3"></div>
                            <button
                              type="button"
                              class="flex items-center justify-center rounded-lg bg-submit-button px-5 py-2.5 text-sm font-medium text-white hover:bg-green-800"
                              id="pay-with-wallet"
                            >
                              Continue With Wallet
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <!-- </form> -->
        </section>
      </div>
    </main>

    <!-- Footer Section -->
    <%- include('components/footer') %> 

    <script src="https://www.paypal.com/sdk/js?client-id=<%= paypalClientId %>"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

    <!-- Include html2pdf.js from CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>

    <script>
      // Pass the products data to the front end as a JavaScript object
      const products = <%- JSON.stringify(products) %>;

      let couponApplied = false;

      document
        .getElementById("couponForm")
        .addEventListener("submit", function (event) {
          event.preventDefault();
        
          const selectedCoupon =
            document.getElementById("couponDropdown").value;

          if (selectedCoupon === "0") {
            return window.location.reload(); 
          }

          // Send coupon to backend for validation and discount calculation
          fetch("/applyCoupon", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ couponCode: selectedCoupon }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                // Update the order summary with the new discount and total
                document.getElementById("totalAmount").innerText = `₹ ${data.totalOriginalPrice}`;
                document.getElementById("discountAmount").innerText = `-₹ ${data.discountDeduction}`;
                document.getElementById("couponAmount").innerText = `-₹ ${data.couponDeduction}`;
                document.getElementById("gstAmount").innerText = `₹ ${Math.floor(data.gst)}`;
                document.getElementById("grand-total").innerText = `₹ ${(data.totalDiscountedPrice).toFixed(2)}`; // Fixed to 2 decimal places
                couponApplied = true;
              } else {
                swal({
                    title: "Oops!",
                    text: "Invalid or expired coupon",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
              }
            })
            .catch((error) => console.error("Error applying coupon:", error));
        });

      // Event handler to download the invoice PDF
      document.getElementById("downloadPDF").addEventListener("click", () => {
        // get Order Summary Details
        const element = document.getElementById("order-summary");

        const opt = {
          margin: 1,
          filename: "order-summary.pdf",
          image: { type: "jpeg", quality: 0.98 },
          html2canvas: { scale: 2 },
          jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
          pagebreak: { mode: ["avoid-all"] },
        };

        // Convert the HTML element to PDF using html2pdf
        html2pdf()
          .from(element)
          .set(opt)
          .toPdf()
          .get("pdf")
          .then((pdf) => {
            // Add custom content such as heading after the HTML content is converted
            pdf.setFontSize(22); // Set font size for the heading
            pdf.text("Invoice", 0.5, 1); // (text, x-coordinate, y-coordinate)

            // Save the modified PDF
            pdf.save(opt.filename);
          });
      });

      // To Generate Order Summary
      const generateOrderSummary = function (order) {
        //  Get order summary details
        const orderSummary = document.getElementById("order-summary");

        // Helper function to create list items
        const createListItem = function (label, value) {
          const li = document.createElement("li");
          li.classList.add("flex", "flex-wrap", "gap-4", "text-sm");
          li.innerHTML = `${label} <span class="ml-auto font-bold">${value}</span>`;
          return li;
        };

        // Clear existing content
        orderSummary.innerHTML = "";

        // Create a <ul> element to hold the list items
        const ul = document.createElement("ul");
        ul.classList.add("text-gray-800", "space-y-4");

        // Add Order ID
        ul.appendChild(createListItem("Order ID", order._id));

        // Add User ID
        ul.appendChild(createListItem("Name", order.user.first_name +" "+order.user.second_name));

        const date = new Date(order.createdAt);
        const options = {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          hour12: true, // Set to false for 24-hour format
        };

        // Add Order Date
        ul.appendChild(
          createListItem(
            "Order Date",
            date.toLocaleDateString("en-US", options)
          )
        );

        // Add Shipping Address
        ul.appendChild(createListItem("Shipping Address", `${order.shippingAddress.address_line_1},\n ${order.shippingAddress.address_line_2}, ${order.shippingAddress.street}, ${order.shippingAddress.city}, ${order.shippingAddress.state}, ${order.shippingAddress.country}, ${order.shippingAddress.zip_code}`));

        // Add Phone Number
        ul.appendChild(createListItem("Phone number : ", order.user.phone_number));

        // Add Products
        const productHeader = document.createElement("li");
        productHeader.classList.add("flex", "flex-wrap", "gap-4", "text-sm");
        productHeader.textContent = "Products List:";
        ul.appendChild(productHeader);

        const discountDeduction = order.products.reduce((acc, product) => {
          acc += (product.discountValue * product.quantity);
          return acc;
        }, 0);

        const totalGst = order.products.reduce((acc, product) => {
          acc += product.gst;
          return acc;
        }, 0);

        order.products.forEach((product) => {
          // Add Product Name
          ul.appendChild(createListItem("Product Name", `${product.product.product_brand} ${product.product.product_name} ${product.product.processor} ${product.product.processor_generation} ${product.product.product_model}`));

          // Add Product Quantity
          ul.appendChild(
            createListItem("Product Quantity", product.quantity)
          );

          // Add Product Price
          ul.appendChild(
            createListItem("Product Price", `₹ ${product.price}`)
          );

          // Add Discounted Value
          ul.appendChild(
            createListItem("Discount", `₹ ${product.discountValue}`)
          );

          // Add Discounted Price
          ul.appendChild(
            createListItem("Discounted Price", `₹ ${product.discountedPrice}`)
          );
        });

        // Add Payment Mode
        let paymentMode = order.paymentMode;
        if (paymentMode === "upi") {
          paymentMode = "PayPal";
        } else if (paymentMode === "cod") {
          paymentMode = "Cash On Delievery";
        } else {
          paymentMode = "Wallet";
        }

        // Add Payment Mode
        ul.appendChild(createListItem("Payment Mode", paymentMode));

        // Add Payment Status
        ul.appendChild(createListItem("Payment Status", order.paymentStatus));

        // Add Order Status
        ul.appendChild(createListItem("Order Status", order.orderStatus));

        // Add Discount Deduction
        ul.appendChild(
          createListItem(
            "Discount Deduction",
            `₹ ${new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,
                  }).format(discountDeduction.toFixed())}`
          )
        );

        // Add Coupon Deduction
        ul.appendChild(
          createListItem(
            "Coupon Deduction",
            `₹ ${new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,
                  }).format(order.couponDeduction.toFixed())}`
          )
        );

        // Add Gst
        ul.appendChild(createListItem("GST", `₹ ${new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,
                  }).format(totalGst.toFixed())}`));

        // Add Total Amount
        let totalAmount = createListItem(
          "Total Amount",
          `₹ ${new Intl.NumberFormat("en-US", { minimumFractionDigits: 0,
                  }).format(order.totalAmount.toFixed())}`
        );

        totalAmount.classList.add("font-bold");
        ul.appendChild(totalAmount);

        // Append the <ul> to the order summary container
        orderSummary.appendChild(ul);
      }

      // Function to get the grand total amount from the HTML
      const getGrandTotalInINR = function () {
        const grandTotalElement = document.getElementById('grand-total');
        if (grandTotalElement) {
          // Extract the amount value from the HTML element
          const grandTotalText = grandTotalElement.textContent.replace(/₹ |,/g, "");
          
          // Remove the currency symbol and any extra spaces
          const amountInINR = parseFloat(grandTotalText);
          return amountInINR;
        }
        return 0; // Default value if element not found
      }

      paypal.Buttons({createOrder: function() {
        // Convert the INR to USD
        const amountInINR = getGrandTotalInINR();

        return fetch('/create-paypal-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            totalAmount: amountInINR
          })
        })
          .then(res => res.json())
          .then(order => order.id);
        },
            onApprove: function(data) {
                return fetch('/capture-paypal-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: data.orderID
                    })
                }).then(res => res.json())
                  .then(details => {
                    // Get selected address
                    const addressSelection = document.querySelector('input[name="address-selection"]:checked').value;

                    // Parse address data
                    const address = JSON.parse(addressSelection);

                    // Get payment method
                    const paymentMethod = document.querySelector('input[name="payment-method"]:checked').id;

                    let billSummary = {};

                    if ( couponApplied ) {
                      // Extract data from Order Summary
                      const subtotal = Number(document.getElementById("totalAmount").textContent.slice(2));
                      const discount = Number(document.getElementById("discountAmount").textContent.slice(3));
                      const couponDeduction = Number(document.getElementById("couponAmount").textContent.slice(3));
                      const gst = Number(document.getElementById("gstAmount").textContent.slice(2));
                      const grandTotal = Number(document.getElementById("grand-total").textContent.slice(2));
                        
                      // Get bill summary
                      billSummary = {
                        subtotal: subtotal,
                        discount: discount,
                        couponDeduction: couponDeduction,
                        gst: gst,
                        grandTotal: grandTotal, 
                      };
                    } else {
                      // Get bill summary
                      billSummary = {
                        subtotal: "<%=billSummary.subtotal%>",
                        discount: "<%=billSummary.discount%>",
                        couponDeduction: "<%=billSummary.couponDeduction%>",
                        gst: "<%=billSummary.gst%>",
                        grandTotal: "<%= billSummary.grandTotal%>",
                      };
                    }
                        
                    // Prepare data to be sent to the server
                    const data = {
                      address,
                      paymentMethod,
                      billSummary,
                      products,
                    };                    

                    // Send the order data to the server
                    return fetch('/checkout', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                    })
                    .then((response) => response.json())
                    .then((data) => {
                      if (data.success) {
                        // Generathe order Summary
                        generateOrderSummary(data.order);
                        // Show the success modal after order is placed
                        document.getElementById('order-success-modal').classList.remove('hidden');
                      } else {
                        swal({
                    title: "Oops!",
                    text: "Something went wrong please try again",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                      }
                    })
                    .catch((error) => {
                      console.error('Error:', error);
                      swal({
                    title: "Oops!",
                    text: "Something went wrong please try again",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                    });
                });
            }
        }).render('#paypal-button-container');


          document
            .querySelectorAll('input[name="address-selection"]')
            .forEach((radio) => {
              radio.addEventListener("change", function () {
              const selectedAddress = JSON.parse(this.value);

              document.getElementById(
                "address_line"
              ).value = `${selectedAddress.address_line_1} ${selectedAddress.address_line_2}`;
              document.getElementById("street").value = selectedAddress.street;
              document.getElementById("city").value = selectedAddress.city;
              document.getElementById("state").value = selectedAddress.state;
              document.getElementById("country").value = selectedAddress.country;
              document.getElementById("zip_code").value =
                selectedAddress.zip_code;
                });
              });

          document
            .getElementById("place-order")
            .addEventListener("click", function () {
              // Get selected address
              const addressSelection = document.querySelector(
                'input[name="address-selection"]:checked'
              ).value;

              const address = JSON.parse(addressSelection);

              // Get payment method
              const paymentMethod = document.querySelector(
                'input[name="payment-method"]:checked'
              ).id;

              let billSummary = {};

              if ( couponApplied ) {
                // Extract data from Order Summary
                const subtotal = Number(document.getElementById("totalAmount").textContent.slice(2));
                const discount = Number(document.getElementById("discountAmount").textContent.slice(3));
                const couponDeduction = Number(document.getElementById("couponAmount").textContent.slice(3));
                const gst = Number(document.getElementById("gstAmount").textContent.slice(2));
                const grandTotal = Number(document.getElementById("grand-total").textContent.slice(2));
                  
                // Get bill summary
                billSummary = {
                  subtotal: subtotal,
                  discount: discount,
                  couponDeduction: couponDeduction,
                  gst: gst,
                  grandTotal: grandTotal,
                };
              } else {
                // Get bill summary
                billSummary = {
                  subtotal: "<%=billSummary.subtotal%>",
                  discount: "<%=billSummary.discount%>",
                  couponDeduction: "<%=billSummary.couponDeduction%>",
                  gst: "<%=billSummary.gst%>",
                  grandTotal: "<%= billSummary.grandTotal%>",
                };
              }

              if (billSummary.grandTotal > 25000 ) {
                swal({
                    title: "Oops!",
                    text: "Maximum 25000 rupees payment allowed through Cash on delievery please choose other payment method",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                  return;
              }

              // Prepare data to be sent to the server
              const data = {
                address,
                paymentMethod,
                billSummary,
                products
              };

              // Send the data via AJAX
              fetch("/checkout", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  },
                  body: JSON.stringify(data),
                })
                  .then((response) => {
                    // Return the parsed JSON data
                    return response.json();
                  })
                  .then((data) => {
                    if (data.success) {
                      const order = data.order;
                      generateOrderSummary(order);
                      // Show the success modal
                      document.getElementById("order-success-modal").classList.remove("hidden");
                    } else {
                      swal({
                    title: "Oops!",
                    text: "Something went wrong please try again",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                    }
                  })
                  .catch((error) => {
                    console.error("Error:", error);
                    swal({
                    title: "Oops!",
                    text: "Something went wrong please try again",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                  });
                });


            document.getElementById("pay-with-wallet").addEventListener("click", function() {
              // Get selected address
              const addressSelection = document.querySelector(
                'input[name="address-selection"]:checked'
              ).value;

              const address = JSON.parse(addressSelection);

              // Get payment method
              const paymentMethod = document.querySelector(
                'input[name="payment-method"]:checked'
              ).id;

              let billSummary = {};

              if ( couponApplied ) {
                // Extract data from Order Summary
                const subtotal = Number(document.getElementById("totalAmount").textContent.slice(2));
                const discount = Number(document.getElementById("discountAmount").textContent.slice(3));
                const couponDeduction = Number(document.getElementById("couponAmount").textContent.slice(3));
                const gst = Number(document.getElementById("gstAmount").textContent.slice(2));
                const grandTotal = Number(document.getElementById("grand-total").textContent.slice(2));
                  
                // Get bill summary
                billSummary = {
                  subtotal: subtotal,
                  discount: discount,
                  couponDeduction: couponDeduction,
                  gst: gst,
                  grandTotal: grandTotal,
                };
              } else {
                // Get bill summary
                billSummary = {
                  subtotal: "<%=billSummary.subtotal%>",
                  discount: "<%=billSummary.discount%>",
                  couponDeduction: "<%=billSummary.couponDeduction%>",
                  gst: "<%=billSummary.gst%>",
                  grandTotal: "<%= billSummary.grandTotal%>",
                };
              } 

              // Prepare data to be sent to the server
              const data = {
                address,
                paymentMethod,
                billSummary,
                products
              };

              // Send the data via AJAX
              fetch("/walletPay", {
                method: "POST",
                headers: { 
                  "Content-Type": "application/json",
                  },
                  body: JSON.stringify(data),
                })
                  .then((response) => {
                    // Return the parsed JSON data
                    return response.json();
                  })
                  .then((data) => {
                    if (data.success) {
                      generateOrderSummary(data.order);
                      // Show the success modal
                      document.getElementById("order-success-modal").classList.remove("hidden");
                    } else {
                      swal({
                    title: "Oops!",
                    text: "Something went wrong please try again",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                    }
                  })
                  .catch((error) => {
                    console.error("Error:", error);
                    swal({
                    title: "Oops!",
                    text: "Something went wrong please try again",
                    icon: "error",
                    buttons: {
                      confirm: {
                        text: "Try Again",
                        value: true,
                        visible: true,
                        className: "btn-danger", // Custom styling for the button
                        closeModal: true,
                      },
                    },
                    dangerMode: true, // Adds red border to highlight it's a danger action
                    timer: 5000, // Auto close the alert after 5 seconds
                  });
                  });
            });

          // Select the modal and the close button
          const modal = document.getElementById('order-success-modal');
          const closeButton = document.getElementById('close-modal-button');

          // Add click event listener to the "Got it" button
          closeButton.addEventListener('click', () => {
            modal.classList.add('hidden');
            window.location.href = '/orderPage';
          });
    </script>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Head Boiler Plate -->
    <%- include('components/headerboilerplate') %>
  </head>
  <body class="mr-0">
    <div class="flex">
      <!-- Sidebar Section -->
      <div class="w-2/12 fixed h-full">
        <%- include('components/sidebar') %>
      </div>

      <!-- Confirmation Modal for block Category-->
      <div
        id="confirmationModal"
        class="hidden fixed inset-0 p-4 flex flex-wrap justify-center items-center w-full h-full z-[1000] before:fixed before:inset-0 before:w-full before:h-full before:bg-[rgba(0,0,0,0.5)] overflow-auto font-[sans-serif]"
      >
        <div class="w-full max-w-md bg-white shadow-lg rounded-xl p-6 relative">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-3.5 cursor-pointer shrink-0 fill-gray-400 hover:fill-red-500 float-right close-modal"
            viewBox="0 0 320.591 320.591"
          >
            <path
              d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z"
              data-original="#000000"
            ></path>
            <path
              d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"
              data-original="#000000"
            ></path>
          </svg>

          <div class="my-8 text-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-14 fill-red-500 inline"
              viewBox="0 0 286.054 286.054"
            >
              <path
                fill="#e2574c"
                d="M143.027 0C64.04 0 0 64.04 0 143.027c0 78.996 64.04 143.027 143.027 143.027 78.996 0 143.027-64.022 143.027-143.027C286.054 64.04 222.022 0 143.027 0zm0 259.236c-64.183 0-116.209-52.026-116.209-116.209S78.844 26.818 143.027 26.818s116.209 52.026 116.209 116.209-52.026 116.209-116.209 116.209zm.009-196.51c-10.244 0-17.995 5.346-17.995 13.981v79.201c0 8.644 7.75 13.972 17.995 13.972 9.994 0 17.995-5.551 17.995-13.972V76.707c-.001-8.43-8.001-13.981-17.995-13.981zm0 124.997c-9.842 0-17.852 8.01-17.852 17.86 0 9.833 8.01 17.843 17.852 17.843s17.843-8.01 17.843-17.843c-.001-9.851-8.001-17.86-17.843-17.86z"
                data-original="#e2574c"
              />
            </svg>

            <h4 class="text-lg text-gray-800 font-semibold mt-6">
              Are you sure want to block this Category?
            </h4>
            <p class="text-sm text-gray-500 mt-2">Are you sure to proceed?</p>
          </div>

          <div class="flex max-sm:flex-col gap-4">
            <button
              id="cancelButton"
              type="button"
              class="px-5 py-2.5 rounded-lg w-full tracking-wide text-gray-800 text-sm border-none outline-none bg-gray-200 hover:bg-gray-300"
            >
              Cancel
            </button>
            <button
              id="confirmButton"
              type="button"
              class="px-5 py-2.5 rounded-lg w-full tracking-wide text-white text-sm border-none outline-none bg-red-500 hover:bg-red-600"
            >
              Confirm
            </button>
          </div>
        </div>
      </div>

      <!-- Confirmation Modal for block Category-->
      <div
        id="unblockconfirmationModal"
        class="hidden fixed inset-0 p-4 flex flex-wrap justify-center items-center w-full h-full z-[1000] before:fixed before:inset-0 before:w-full before:h-full before:bg-[rgba(0,0,0,0.5)] overflow-auto font-[sans-serif]"
      >
        <div class="w-full max-w-md bg-white shadow-lg rounded-xl p-6 relative">
          <div class="my-8 text-center">
            <h4 class="text-lg text-gray-800 font-semibold mt-6">
              Are you sure want to Unblock this Category?
            </h4>
            <p class="text-sm text-gray-500 mt-2">Are you sure to proceed?</p>
          </div>

          <div class="flex max-sm:flex-col gap-4">
            <button
              id="unblockcancelButton"
              type="button"
              class="px-5 py-2.5 rounded-lg w-full tracking-wide text-gray-800 text-sm border-none outline-none bg-gray-200 hover:bg-gray-300"
            >
              Cancel
            </button>
            <button
              id="unblockconfirmButton"
              type="button"
              class="px-5 py-2.5 rounded-lg w-full tracking-wide text-white text-sm border-none outline-none bg-green-500 hover:bg-green-600"
            >
              Confirm
            </button>
          </div>
        </div>
      </div>

      <!-- Content Section -->
      <div class="flex-grow ml-[16.6667%]">
        <!-- Navbar Section -->
        <%- include('components/navbar') %>

        <!-- Add new Category Modal -->
        <div
          id="addNewCategory"
          class="hidden fixed inset-0 p-4 flex flex-wrap justify-center items-center w-full h-full z-[1000] before:fixed before:inset-0 before:w-full before:h-full before:bg-[rgba(0,0,0,0.5)] overflow-auto font-[sans-serif]"
        >
          <div
            class="w-full max-w-lg bg-white shadow-lg rounded-lg p-8 relative"
          >
            <div class="flex items-center">
              <h3 class="text-blue-600 text-xl font-bold flex-1">
                Add New Category
              </h3>
              <button id="closeAddNewCategoryModal" type="button">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-3 ml-2 cursor-pointer shrink-0 fill-gray-400 hover:fill-red-500"
                  viewBox="0 0 320.591 320.591"
                >
                  <path
                    d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z"
                    data-original="#000000"
                  ></path>
                  <path
                    d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"
                    data-original="#000000"
                  ></path>
                </svg>
              </button>
            </div>

            <form id="addNewCategoryForm" class="space-y-4 mt-8">
              <div>
                <label class="text-black text-sm mb-2 block">Category</label>
                <input
                  id="category"
                  name="category"
                  type="text"
                  placeholder="Enter category"
                  class="px-4 py-3 bg-gray-100 w-full text-gray-800 text-sm border-none focus:outline-blue-600 focus:bg-transparent rounded-lg"
                />
                <p
                  id="categoryValueErrorMessage"
                  class="text-red-600 text-sm mt-2"
                ></p>
              </div>

              <div class="flex justify-end gap-4 !mt-8">
                <button
                  id="cancelAddNewCategoryModal"
                  type="button"
                  class="px-6 py-3 rounded-lg text-gray-800 text-sm border-none outline-none tracking-wide bg-gray-200 hover:bg-gray-300"
                >
                  Cancel
                </button>
                <button
                  id="submitNewCategory"
                  type="button"
                  class="px-6 py-3 rounded-lg text-white text-sm border-none outline-none tracking-wide bg-blue-600 hover:bg-blue-700"
                >
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>

        <main class="flex flex-col flex-grow">
          <div class="ml-3 mt-3 items-end">
            <h2 class="text-xl font-bold">Category Management</h2>
          </div>

          <section class="p-3 sm:p-5 max-w-screen">
            <div class="mx-auto max-w-screen px-4 lg:px-12">
              <div
                class="bg-slate-200 relative shadow-md sm:rounded-lg overflow-hidden"
              >
                <div
                  class="flex flex-col md:flex-row items-right justify-between space-y-3 md:space-y-0 md:space-x-4 p-4"
                >
                  <div
                    class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0"
                  >
                    <button
                      id="addCategory"
                      type="button"
                      class="flex items-center justify-center text-white bg-submit-button hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2"
                    >
                      <svg
                        class="h-3.5 w-3.5 mr-2"
                        fill="currentColor"
                        viewbox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                        aria-hidden="true"
                      >
                        <path
                          clip-rule="evenodd"
                          fill-rule="evenodd"
                          d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                        />
                      </svg>
                      Add Category
                    </button>
                  </div>
                </div>
                <div class="overflow-x-auto">
                  <table
                    class="w-full text-sm text-center shadow-2xl shadow-black text-gray-500"
                  >
                    <thead class="text-xs text-white uppercase bg-gray-600">
                      <tr>
                        <th scope="col" class="px-4 py-3">Category</th>
                        <th scope="col" class="px-4 py-3">Related Products</th>
                        <th scope="col" class="px-4 py-3">Status</th>
                        <th scope="col" class="px-4 py-3">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% for ( let i = 0; i < category.length; i++ ) { %>
                      <tr>
                        <td class="px-4 py-3 text-black text-center">
                          <%=category[i].category_name%>
                        </td>

                        <td
                          class="px-4 py-3 text-black text-center flex justify-center"
                        >
                          <select
                            class="bg-gray-50 border border-gray-300 text-start text-black text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-1/2 p-2.5"
                          >
                            <% for ( let j = 0; j < category[i].products.length;
                            j++ ) { %>
                            <option>
                              <%=category[i].products[j].product_brand%>
                              <%=category[i].products[j].product_name%>
                            </option>
                            <% } %>
                          </select>
                        </td>

                        <% if ( category[i].isBlocked === true ) { %>
                        <td class="px-4 py-3 text-black text-center">
                          Blocked
                        </td>
                        <% } else { %>
                        <td class="px-4 py-3 text-black text-center">
                          Unblocked
                        </td>
                        <% } %>

                        <td
                          class="px-4 py-4 text-black flex flex-col lg:flex-row items-center justify-center"
                        >
                          <label class="relative cursor-pointer">
                            <% if ( category[i].isBlocked === true ) { %>
                            <input
                              type="checkbox"
                              class="peer sr-only"
                              data-category-id="<%=category[i]._id%>"
                              checked
                            />
                            <% } else { %>
                            <input
                              type="checkbox"
                              class="peer sr-only"
                              data-category-id="<%=category[i]._id%>"
                            />
                            <% } %>
                            <div
                              class="peer flex h-6 w-11 items-center rounded-full bg-gray-300 after:absolute after:left-[2px] after:h-5 after:w-5 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all peer-checked:bg-[#007bff] peer-checked:after:translate-x-full peer-checked:after:border-white"
                            ></div>
                          </label>
                        </td>
                      </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </section>
        </main>
      </div>
    </div>

    <script>
      const confirmBlock = (categoryId) => {
        const modal = document.getElementById("confirmationModal");
        const confirmButton = document.getElementById("confirmButton");
        const cancelButton = document.getElementById("cancelButton");
        const closeModal = document.querySelector(".close-modal");

        // Show the modal
        modal.classList.remove("hidden");

        // Handle confirmation
        confirmButton.onclick = () => {
          fetch(`/admin/blockCategory/${categoryId}`, {
            method: "PUT",
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                window.location.href = "/admin/addCategoryPage";
              } else {
                alert("Error: " + data.message);
              }
            })
            .catch((error) => console.error("Error:", error));

          // Close the modal after confirmation
          modal.classList.add("hidden");
        };

        // Handle cancellation
        cancelButton.onclick = closeModal.onclick = () => {
          modal.classList.add("hidden");
          window.location.reload();
        };
      };

      const confirmUnblock = (customerId) => {
        const modal = document.getElementById("unblockconfirmationModal");
        const confirmButton = document.getElementById("unblockconfirmButton");
        const cancelButton = document.getElementById("unblockcancelButton");
        const closeModal = document.querySelector(".close-modal");

        // Show the modal
        modal.classList.remove("hidden");

        // Handle confirmation
        confirmButton.onclick = () => {
          fetch(`/admin/unblockCategory/${customerId}`, {
            method: "PUT",
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                window.location.href = "/admin/addCategoryPage";
              } else {
                alert("Error: " + data.message);
              }
            })
            .catch((error) => console.error("Error:", error));

          // Close the modal after confirmation
          modal.classList.add("hidden");
        };

        // Handle cancellation
        cancelButton.onclick = closeModal.onclick = () => {
          modal.classList.add("hidden");
          window.location.reload();
        };
      };

      function toggleBlock(categoryId) {
        const checkbox = document.querySelector(
          `input[type="checkbox"][data-category-id="${categoryId}"]`
        );

        if (checkbox.checked) {
          // Block category
          checkbox.checked = true;
          // Add your blocking logic here
          confirmBlock(categoryId);
        } else {
          // Unblock category
          checkbox.checked = false;
          // Add your unblocking logic here
          confirmUnblock(categoryId);
        }
      }

      // Add event listener to all checkboxes
      document
        .querySelectorAll('input[type="checkbox"]')
        .forEach((checkbox) => {
          checkbox.addEventListener("change", () => {
            const categoryId = checkbox.getAttribute("data-category-id");
            if (categoryId) {
              toggleBlock(categoryId);
            }
          });
        });

      // When Click this button the add New Category Modal Opens
      document
        .getElementById("addCategory")
        .addEventListener("click", function () {
          const addNewCoupon = document.getElementById("addNewCategory");
          addNewCoupon.classList.remove("hidden");
        });

      // It is a common function which is used to close the add new Category Modal
      const addCategoryModalClose = () => {
        const addNewCoupon = document.getElementById("addNewCategory");
        addNewCoupon.classList.add("hidden");
      };

      // Catches the into trigger button and execute the addCategoryModalClose function
      document
        .getElementById("closeAddNewCategoryModal")
        .addEventListener("click", function (e) {
          addCategoryModalClose();
        });

      // Catches the cancel button and execute the addCategoryModalClose function
      document
        .getElementById("cancelAddNewCategoryModal")
        .addEventListener("click", function (e) {
          addCategoryModalClose();
        });

      // Catches the form data
      const addNewCategoryForm = document.getElementById("addNewCategoryForm");

      // Live Validation of category value field
      const categoryValue = document.querySelector('input[name="category"]');
      const categoryValueErrorMessage = document.getElementById(
        "categoryValueErrorMessage"
      );

      categoryValue.addEventListener("input", function () {
        if (categoryValue.value.length < 2) {
          categoryValueErrorMessage.textContent = `Category must be minimum 2 characters.`;
        } else {
          categoryValueErrorMessage.textContent = "";
        }
      });

      // Add a submit event listener to the form
      document
        .getElementById("submitNewCategory")
        .addEventListener("click", async function () {
          const category = document.getElementById("category").value;

          const data = {
            category,
          };

          // Validate form inputs
          let isValid = true;

          if (data.category.length < 2) {
            categoryValueErrorMessage.textContent = `Category must be minimum 2 characters.`;
            isValid = false;
          } else {
            categoryValueErrorMessage.textContent = "";
          }

          if (!isValid) {
            return;
          }

          // Make the POST request using fetch
          try {
            categoryValueErrorMessage.textContent = "";
            const response = await fetch("/admin/addCategoryForm", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            });

            const result = await response.json();
            if (response.ok) {
              document.getElementById("addNewCategoryForm").reset();
              addCategoryModalClose();
              window.location.reload();
            } else {
              categoryValueErrorMessage.textContent = result.message;
            }
          } catch (error) {
            cshowErrorMessage(`Error`, error);
          }
        });
    </script>
  </body>
</html>
